# 액션과 계산 데이터의 차이를 알기

## 액션과 계산, 데이터

### 액션

- 실행 시점과 횟수에 의존합니다.
- 다른 말로 **부수 효과**(side-effects), **부수 효과가 있는 함수**(side-effecting function), **순수하지 않은 함수**(impure function)라고 부르기도 합니다.
- 예) 이메일 보내기, 데이터베이스 읽기

### 계산

- 입력으로 출력을 계산합니다.
- 다른 말로 **순수 함수**(pure function), **수학 함수**(mathematical function)라고 부르기도 합니다.
- 예) 최댓값 찾기, 이메일 주소가 올바른지 확인하기

### 데이터

- 이벤트에 대한 사실
- 예) 사용자가 입력한 이메일 주소, 은행 API로 읽은 달러 수량

## 액션과 계산 데이터는 어디에나 적용할 수 있습니다

- 문제에 대해 생각할 때, 코딩할 때, 코드를 읽을 때 모든 개발 과정에서 이를 구분할 수 있습니다.
- **액션 안에 계산과 데이터, 또다른 액션이 포함되어있을 수 있습니다.**
- **액션**은 호출 시점과 횟수에 의존합니다.
- **계산**은 더 작은 계산과 데이터로 나눌 수 있지만 나누는 것을 언제 멈춰야 할지 아는 것이 중요합니다.
- **데이터**는 다른 영향을 주지 않기 때문에 가장 먼저 데이터를 찾는 작업을 진행하는 것이 좋습니다.

## 전체적인 정리 (데이터, 계산, 액션)

## 데이터

- 데이터에 의미를 담기 위해서는 자료구조를 활용하면 됩니다.

### 함수형 프로그래밍에서 자료구조를 만들 때 두 가지 원칙

- Copy-on-Write: 변경 시에는 복사본 만들기
- 방어적 복사: 보관하려고 하는 데이터도 복사본 만들기

### 데이터의 장점

- 직렬화: 함수보다 디스크에 저장해 전송하고 읽기 쉬움
- 동일성 비교: 비교가 쉬움
- 자유로운 해석: 다양한 문제에 데이터를 활용해 해석할 수 있음

## 계산

- 실행 시점과 횟수에 관계없이 항상 같은 입력값에 대해 같은 출력값을 돌려줍니다.
- 계산을 언제 사용할지, 어떻게 사용할지에 때라 의미가 달라집니다.

### 계산의 장점

- 테스트가 쉬움
- 기계적인 분석이 쉬움
- 여러 개의 계산을 하나의 큰 계산으로 조합하기 좋음

### 계산 활용 시 고민하지 않아도 되는 것들

- 동시에 실행되는 것
- 과거에 실행되었던 것이나 미래에 실행할 것
- 실행 횟수

### 계산의 단점

- 실행 전에는 결과를 장담할 수 없음

## 액션

- 액션은 부수효과를 발생하는 함수로, 쓰는 순간 코드 전체로 퍼저나가기 때문에 조심해야합니다.
- 특정 함수에 액션이 포함되어있다면 그 함수도 액션이 됩니다.

### 액션의 형태

1. 함수 호출: `alert()`
2. 메소드 호출: `console.log()`
3. 생성자: `new Date()`
4. 표현식: `user.first_name`, `arr[0]`
5. 상태: 값 할당, 속성 삭제 등

- 액션은 호출 시점(순서)이나 횟수(반복)에 의존하는지를 판단해 수정할 수 있습니다.
- 액션은 외부 세상에 영향을 주기 때문에 그것으로 구별할 수도 있습니다.
